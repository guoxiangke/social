<?php

/**
 * @file
 * Provides integration with Moodle2.
 */

/** 
 * Implements hook_user_logout(). 
 */ 
function moodle2_user_logout($user) {
    $drupal_session_name = session_name();
    $drupal_cookie_params = session_get_cookie_params();
    session_write_close();

    chdir('learning'); // /var/www/drupal7/
    include_once("config4drupal.php");
    include_once('lib/setup4drupal.php');

    require_logout();

    session_write_close();
    chdir('..');

    session_name($drupal_session_name);
    //moodle called it's session_set_cookie_params
    session_set_cookie_params($drupal_cookie_params['lifetime'], $drupal_cookie_params['path'], $drupal_cookie_params['domain'], $drupal_cookie_params['secure'], $drupal_cookie_params['httponly']);
    drupal_session_initialize();

    _drupal_session_delete_cookie( session_name() );
}


/** 
 * Implements hook_user_update(). 
 */ 
function moodle2_user_update($user,$account) {
	if( (isset($account->new_pass) && !empty($account->new_pass)) || (isset($user['name']) && !empty($user['name'])) || (isset($user['mail']) && !empty($user['mail'])) ){

    if(!moodle2_db_connect()){
      drupal_set_message('', 'Sorry, cannot connect to moodle DB. Please report to site admin.</a>');
      return;
     }
     else{
      //file_put_contents('/tmp/setcoookie.txt',__FUNCTION__.' line:'.__LINE__." user=".print_r($user,true)." account=".print_r($account,true)."\n",FILE_APPEND);
      chdir('learning');
      include_once("config4drupal.php");
      chdir('..');
      if( isset($account->new_pass) && !empty($account->new_pass) ){
      $password = moodle2_hash_internal_user_password($account->new_pass);
      $arr1['password'] = $password;
      if(isset($user['name']) && !empty($user['name'])) $arr1['username'] = $user['name'];
      if(isset($user['mail']) && !empty($user['mail'])) $arr1['email'] = $user['mail'];
      db_update('user')
        ->fields($arr1)
        ->condition('username', $user['original']->name)
        ->execute();
      }
     else
      {
      $arr1 = array();
      if(isset($user['name']) && !empty($user['name'])) $arr1['username'] = $user['name'];
      if(isset($user['mail']) && !empty($user['mail'])) $arr1['email'] = $user['mail'];
      db_update('user')
        ->fields($arr1)
        ->condition('username', $user['original']->name)
        ->execute();
      }
      db_set_active();
     }
	}
}


/**
 * Calculate hashed value from password using current hash mechanism.
 *
 * @param string $password
 * @return string password hash
 */
function moodle2_hash_internal_user_password($password) {
    global $CFG;

    if (isset($CFG->passwordsaltmain)) {
        return md5($password.$CFG->passwordsaltmain);
    } else {
        return md5($password);
    }
}

function moodle2_db_connect() {//die(__FUNCTION__);return;
  $db_type     = variable_get('moodle_connector_db_type');
  $db_server   = variable_get('moodle_connector_db_server');
  $db_port     = variable_get('moodle_connector_db_port');
  $db_username = variable_get('moodle_connector_db_username');
  $db_password = variable_get('moodle_connector_db_password');
  $db_database = variable_get('moodle_connector_db_database');
  $db_prefix   = variable_get('moodle_connector_db_prefix');

  // If settings are incomplete.
  if (empty($db_type) || empty($db_server) || empty($db_port) ||
      empty($db_username) || empty($db_password) || empty($db_database)
      ) {

    return false;
  }

  $moodle_database = array(
    'driver'   => $db_type,
    'host'     => $db_server,
    'port'     => $db_port,
    'username' => $db_username,
    'password' => $db_password,
    'database' => $db_database,
    'prefix'   => $db_prefix,
  );
//print_r($moodle_database);die();
  // Connect to the Moodle database.
  Database::addConnectionInfo('moodle2_database', 'default', $moodle_database);
  db_set_active('moodle2_database');

  return true;
}

