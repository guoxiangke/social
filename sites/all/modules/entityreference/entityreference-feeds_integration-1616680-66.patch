diff --git a/entityreference.feeds.inc b/entityreference.feeds.inc
index d98a4ce..fa518bc 100644
--- a/entityreference.feeds.inc
+++ b/entityreference.feeds.inc
@@ -15,14 +15,42 @@ function entityreference_feeds_processor_targets_alter(&$targets, $entity_type,
   foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
     $info = field_info_field($name);
     if ($info['type'] == 'entityreference') {
+      // We don't use ":guid" in key, not to break existing configurations.
       $targets[$name] = array(
-        'name'        => check_plain($instance['label']),
+        'name'        => check_plain($instance['label'] . t(' (Entity reference by Feeds GUID)')),
         'callback'    => 'entityreference_feeds_set_target',
-        'description' => t('The field instance @label of @id', array(
+        'description' => t('The field instance @label of @id matched by Feeds GUID.', array(
           '@label' => $instance['label'],
           '@id'    => $name,
         )),
       );
+      $targets[$name . ':url'] = array(
+        'name'        => check_plain($instance['label'] . t(' (Entity reference by Feeds URL)')),
+        'callback'    => 'entityreference_feeds_set_target',
+        'description' => t('The field instance @label of @id matched by Feeds URL.', array(
+          '@label' => $instance['label'],
+          '@id'    => $name,
+        )),
+        'real_target' => $name,
+      );
+      $targets[$name . ':etid'] = array(
+        'name'        => check_plain($instance['label'] . t(' (Entity reference by Entity ID)')),
+        'callback'    => 'entityreference_feeds_set_target',
+        'description' => t('The field instance @label of @id matched by Entity ID.', array(
+          '@label' => $instance['label'],
+          '@id'    => $name,
+        )),
+        'real_target' => $name,
+      );
+      $targets[$name . ':label'] = array(
+        'name'        => check_plain($instance['label'] . t(' (Entity reference by Entity label)')),
+        'callback'    => 'entityreference_feeds_set_target',
+        'description' => t('The field instance @label of @id matched by Entity label.', array(
+          '@label' => $instance['label'],
+          '@id'    => $name,
+        )),
+        'real_target' => $name,
+      );
     }
   }
 }
@@ -42,12 +70,8 @@ function entityreference_feeds_processor_targets_alter(&$targets, $entity_type,
  *   The target key on $entity to map to.
  * @param $value
  *   The value to map. MUST be an array.
- * @param $mapping
- *   Array of mapping settings for current value.
- * @param $input_format
- *   TRUE if an input format should be applied.
  */
-function entityreference_feeds_set_target($source, $entity, $target, $value, $mapping, $input_format = FALSE) {
+function entityreference_feeds_set_target($source, $entity, $target, $value) {
 
   // Don't do anything if we weren't given any data.
   if (empty($value)) {
@@ -62,8 +86,19 @@ function entityreference_feeds_set_target($source, $entity, $target, $value, $ma
     $values = array($value);
   }
 
+  // Determine the field we are matching against.
+  if (strpos($target, ':') === false) {
+    $match_key = 'guid';
+  }
+  else {
+    list($target, $match_key) = explode(':', $target, 2);
+  }
+
   // Get some useful field information.
   $info = field_info_field($target);
+  if ($match_key == 'label') {
+    $handler = entityreference_get_selection_handler($info);
+  }
 
   // Set the language of the field depending on the mapping.
   $language = isset($mapping['language']) ? $mapping['language'] : LANGUAGE_NONE;
@@ -75,13 +110,27 @@ function entityreference_feeds_set_target($source, $entity, $target, $value, $ma
 
     // Only process if this value was set for this instance.
     if ($value) {
-
-      // Fetch the entity ID resulting from the mapping table look-up.
-      $entity_id = db_query(
-        'SELECT entity_id FROM {feeds_item} WHERE guid = :guid',
-        array(':guid' => $value)
-      )->fetchField();
-
+      switch ($match_key) {
+        case 'guid':
+        case 'url':
+          // Fetch the entity ID resulting from the mapping table look-up.
+          $entity_id = db_select('feeds_item', 'fi')
+            ->fields('fi', array('entity_id'))
+            ->condition($match_key, $value,'=')
+            ->execute()
+            ->fetchField();
+          break;
+        case 'etid':
+          $entity_id = $value;
+          break;
+        case 'label':
+          $options = $handler->getReferencableEntities($value, '=');
+          $options = reset($options);
+          $etids = array_keys($options);
+          // Use the first matching entity.
+          $entity_id = reset($etids);
+          break;
+      }
       /*
        * Only add a reference to an existing entity ID if there exists a
        * mapping between it and the provided GUID.  In cases where no such
@@ -106,6 +155,7 @@ function entityreference_feeds_set_target($source, $entity, $target, $value, $ma
          * this opportunity later, we need to destroy the hash.
          */
         unset($entity->feeds_item->hash);
+        $source->log('entityreference', t('No existing entity found for entity @source_id entityreference to source entity @value', array('@source_id' => $entity->feeds_item->entity_id, '@value' => $value)));
       }
     }
 
diff --git a/entityreference.info b/entityreference.info
index a56e215..9772c69 100644
--- a/entityreference.info
+++ b/entityreference.info
@@ -21,3 +21,4 @@ files[] = views/entityreference_plugin_row_fields.inc
 files[] = tests/entityreference.handlers.test
 files[] = tests/entityreference.taxonomy.test
 files[] = tests/entityreference.admin.test
+files[] = tests/entityreference.feeds.test
diff --git a/tests/entityreference.feeds.test b/tests/entityreference.feeds.test
new file mode 100644
index 0000000..4dc1901
--- /dev/null
+++ b/tests/entityreference.feeds.test
@@ -0,0 +1,248 @@
+<?php
+
+/**
+ * @file
+ * Test case for simple CCK field mapper mappers/content.inc.
+ */
+
+/**
+ * Class for testing Feeds field mapper.
+ */
+class FeedsMapperFieldTestCase extends DrupalWebTestCase{
+  /**
+   * Test info function.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'Feeds integration (field mapper)',
+      'description' => 'Test Feeds Mapper support for fields.',
+      'group' => 'Entity Reference',
+    );
+  }
+
+  /**
+   * Set-up function.
+   */
+  public function setUp() {
+    parent::setUp();
+    module_enable(array('entityreference_feeds_test'), TRUE);
+    $this->resetAll();
+
+    if (!module_exists('feeds')) {
+      return;
+    }
+
+    $permissions[] = 'access content';
+    $permissions[] = 'administer site configuration';
+    $permissions[] = 'administer content types';
+    $permissions[] = 'administer nodes';
+    $permissions[] = 'bypass node access';
+    $permissions[] = 'administer taxonomy';
+    $permissions[] = 'administer users';
+    $permissions[] = 'administer feeds';
+
+    // Create an admin user and log in.
+    $this->admin_user = $this->drupalCreateUser($permissions);
+    $this->drupalLogin($this->admin_user);
+  }
+
+  /**
+   * Check if mapping exists.
+   *
+   * @param string $id
+   *   ID of the importer.
+   * @param integer $i
+   *   The key of the mapping.
+   * @param string $source
+   *   The source field.
+   * @param string $target
+   *   The target field.
+   *
+   * @return integer
+   *   -1 if the mapping doesn't exist, the key of the mapping otherwise.
+   */
+  public function mappingExists($id, $i, $source, $target) {
+
+    $current_mappings = $this->getCurrentMappings($id);
+
+    if ($current_mappings) {
+      foreach ($current_mappings as $key => $mapping) {
+        if ($mapping['source'] == $source && $mapping['target'] == $target && $key == $i) {
+          return $key;
+        }
+      }
+    }
+
+    return -1;
+  }
+
+  /**
+   * Adds mappings to a given configuration.
+   *
+   * @param string $id
+   *   ID of the importer.
+   * @param array $mappings
+   *   An array of mapping arrays. Each mapping array must have a source and
+   *   an target key and can have a unique key.
+   * @param bool $test_mappings
+   *   (optional) TRUE to automatically test mapping configs. Defaults to TRUE.
+   */
+  public function addMappings($id, $mappings, $test_mappings = TRUE) {
+
+    $path = "admin/structure/feeds/$id/mapping";
+
+    // Iterate through all mappings and add the mapping via the form.
+    foreach ($mappings as $i => $mapping) {
+
+      if ($test_mappings) {
+        $current_mapping_key = $this->mappingExists($id, $i, $mapping['source'], $mapping['target']);
+        $this->assertEqual($current_mapping_key, -1, 'Mapping does not exist before addition.');
+      }
+
+      // Get unique flag and unset it. Otherwise, drupalPost will complain that
+      // Split up config and mapping.
+      $config = $mapping;
+      unset($config['source'], $config['target']);
+      $mapping = array('source' => $mapping['source'], 'target' => $mapping['target']);
+
+      // Add mapping.
+      $this->drupalPost($path, $mapping, t('Add'));
+
+      // If there are other configuration options, set them.
+      if ($config) {
+        $this->drupalPostAJAX(NULL, array(), 'mapping_settings_edit_' . $i);
+
+        // Set some settings.
+        $edit = array();
+        foreach ($config as $key => $value) {
+          $edit["config[$i][settings][$key]"] = $value;
+        }
+        $this->drupalPostAJAX(NULL, $edit, 'mapping_settings_update_' . $i);
+        $this->drupalPost(NULL, array(), t('Save'));
+      }
+
+      if ($test_mappings) {
+        $current_mapping_key = $this->mappingExists($id, $i, $mapping['source'], $mapping['target']);
+        $this->assertTrue($current_mapping_key >= 0, 'Mapping exists after addition.');
+      }
+    }
+  }
+
+  /**
+   * Gets an array of current mappings from the feeds_importer config.
+   *
+   * @param string $id
+   *   ID of the importer.
+   *
+   * @return bool|array
+   *   FALSE if the importer has no mappings, or an an array of mappings.
+   */
+  public function getCurrentMappings($id) {
+    $config = db_query("SELECT config FROM {feeds_importer} WHERE id = :id", array(':id' => $id))->fetchField();
+
+    $config = unserialize($config);
+
+    // We are very specific here. 'mappings' can either be an array or not
+    // exist.
+    if (array_key_exists('mappings', $config['processor']['config'])) {
+      $this->assertTrue(is_array($config['processor']['config']['mappings']), 'Mappings is an array.');
+
+      return $config['processor']['config']['mappings'];
+    }
+
+    return FALSE;
+  }
+
+  /**
+   * Basic test loading a double entry CSV file.
+   */
+  public function test() {
+    if (!module_exists('feeds')) {
+      return;
+    }
+
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet('admin/structure/types/manage/article/fields');
+    $this->assertText('Ref - entity ID', t('Found Entity reference field %field.', array('%field' => 'field_er_id')));
+    $this->assertText('Ref - entity label', t('Found Entity reference field %field.', array('%field' => 'field_er_label')));
+    $this->assertText('Ref - feeds GUID', t('Found Entity reference field %field.', array('%field' => 'field_er_guid')));
+    $this->assertText('Ref - feeds URL', t('Found Entity reference field %field.', array('%field' => 'field_er_url')));
+
+    // Add feeds importer
+    $this->drupalGet('admin/structure/feeds');
+    $this->clickLink('Add importer');
+    $this->drupalPost('admin/structure/feeds/create', array('name' => 'Nodes', 'id' => 'nodes'), 'Create');
+    $this->assertText('Your configuration has been created with default settings.');
+
+    $this->drupalPost('admin/structure/feeds/nodes/settings/', array('content_type' => '', 'import_period' => -1), 'Save');
+    $this->assertText('Your changes have been saved.');
+
+    $this->drupalPost("admin/structure/feeds/nodes/fetcher", array('plugin_key' => 'FeedsFileFetcher'), 'Save');
+    $config = unserialize(db_query("SELECT config FROM {feeds_importer} WHERE id = :id", array(':id' => 'nodes'))->fetchField());
+    $this->assertEqual($config['fetcher']['plugin_key'], 'FeedsFileFetcher', 'Verified correct fetcher (FeedsFileFetcher).');
+
+    $this->drupalPost("admin/structure/feeds/nodes/parser", array('plugin_key' => 'FeedsCSVParser'), 'Save');
+    $config = unserialize(db_query("SELECT config FROM {feeds_importer} WHERE id = :id", array(':id' => 'nodes'))->fetchField());
+    $this->assertEqual($config['parser']['plugin_key'], 'FeedsCSVParser', 'Verified correct parser (FeedsCSVParser).');
+
+    $this->drupalPost('admin/structure/feeds/nodes/settings/FeedsNodeProcessor', array('content_type' => 'article'), 'Save');
+    $this->assertText('Your changes have been saved.');
+
+    $this->addMappings('nodes', array(
+        0 => array(
+          'source' => 'title',
+          'target' => 'title',
+        ),
+        1 => array(
+          'source' => 'nid',
+          'target' => 'nid',
+          'unique' => TRUE,
+        ),
+        2 => array(
+          'source' => 'permalink',
+          'target' => 'url',
+          'unique' => TRUE,
+        ),
+        3 => array(
+          'source' => 'nid',
+          'target' => 'guid',
+          'unique' => TRUE,
+        ),
+        4 => array(
+          'source' => 'parent_nid',
+          'target' => 'field_er_id:etid',
+        ),
+        5 => array(
+          'source' => 'parent_title',
+          'target' => 'field_er_label:label',
+        ),
+        6 => array(
+          'source' => 'parent_url',
+          'target' => 'field_er_url:url',
+        ),
+        7 => array(
+          'source' => 'parent_guid',
+          'target' => 'field_er_guid',
+        ),
+      )
+    );
+
+    $file = realpath(getcwd()) . '/' . drupal_get_path('module', 'entityreference') . '/tests/feeds_test.csv';
+    $this->assertTrue(file_exists($file), 'Source file exists');
+
+    $this->drupalPost('import/nodes', array('files[feeds]' => $file), 'Import');
+    $this->assertText('Created 2 nodes');
+
+    $parent = node_load(1);
+    $this->assertTrue(empty($parent->field_er_id['und'][0]['target_id']), t('Parent node: Import by entity ID OK.'));
+    $this->assertTrue(empty($parent->field_er_label['und'][0]['target_id']), t('Parent node: Import by entity label OK.'));
+    $this->assertTrue(empty($parent->field_er_guid['und'][0]['target_id']), t('Parent node: Import by feeds GUID OK.'));
+    $this->assertTrue(empty($parent->field_er_url['und'][0]['target_id']), t('Parent node: Import by feeds URL OK.'));
+
+    $child = node_load(2);
+    $this->assertTrue($child->field_er_id['und'][0]['target_id'] == 1, t('Child node: Import by entity ID OK.'));
+    $this->assertTrue($child->field_er_label['und'][0]['target_id'] == 1, t('Child node: Import by entity label OK.'));
+    $this->assertTrue($child->field_er_guid['und'][0]['target_id'] == 1, t('Child node: Import by feeds GUID OK.'));
+    $this->assertTrue($child->field_er_url['und'][0]['target_id'] == 1, t('Child node: Import by feeds URL OK.'));
+  }
+}
diff --git a/tests/feeds_test.csv b/tests/feeds_test.csv
new file mode 100644
index 0000000..c145ce3
--- /dev/null
+++ b/tests/feeds_test.csv
@@ -0,0 +1,3 @@
+"nid","title","permalink","parent_nid","parent_title","parent_url","parent_guid"
+"1","Views","http://drupal.org/project/views","","","",""
+"2","Views bulk operations","http://drupal.org/project/views_bulk_operations","1","Views","http://drupal.org/project/views","1"
diff --git a/tests/modules/entityreference_feeds_test/entityreference_feeds_test.info b/tests/modules/entityreference_feeds_test/entityreference_feeds_test.info
new file mode 100644
index 0000000..f0dab6d
--- /dev/null
+++ b/tests/modules/entityreference_feeds_test/entityreference_feeds_test.info
@@ -0,0 +1,9 @@
+name = "Entityreference - Feeds integration tests"
+description = "Support module for the Entityreference - Feeds integration tests."
+package = Testing
+core = 7.x
+hidden = TRUE
+
+dependencies[] = feeds
+dependencies[] = feeds_ui
+dependencies[] = entityreference
diff --git a/tests/modules/entityreference_feeds_test/entityreference_feeds_test.module b/tests/modules/entityreference_feeds_test/entityreference_feeds_test.module
new file mode 100644
index 0000000..f16b360
--- /dev/null
+++ b/tests/modules/entityreference_feeds_test/entityreference_feeds_test.module
@@ -0,0 +1,104 @@
+<?php
+
+/**
+ * @file
+ * Support module for Entity reference - Feeds integration.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function entityreference_feeds_test_install() {
+  field_info_cache_clear();
+  // Entity reference field - mapped by ID.
+  $field = array(
+    'field_name' => 'field_er_id',
+    'type' => 'entityreference',
+    'cardinality' => 1,
+    'settings' => array(
+      'target_type' => 'node',
+      'handler' => 'base',
+      'handler_settings' => array(
+        'target_bundles' => array('article' => 'article'),
+      ),
+    ),
+  );
+  field_create_field($field);
+
+  $instance = array(
+    'field_name' => 'field_er_id',
+    'entity_type' => 'node',
+    'label' => 'Ref - entity ID',
+    'bundle' => 'article',
+  );
+  field_create_instance($instance);
+
+  // Entity reference field - mapped by Feeds GUID.
+  $field = array(
+    'field_name' => 'field_er_guid',
+    'type' => 'entityreference',
+    'cardinality' => 1,
+    'settings' => array(
+      'target_type' => 'node',
+      'handler' => 'base',
+      'handler_settings' => array(
+        'target_bundles' => array('article' => 'article'),
+      ),
+    ),
+  );
+  field_create_field($field);
+
+  $instance = array(
+    'field_name' => 'field_er_guid',
+    'entity_type' => 'node',
+    'label' => 'Ref - feeds GUID',
+    'bundle' => 'article',
+  );
+  field_create_instance($instance);
+
+  // Entity reference field - mapped by Feeds URL.
+  $field = array(
+    'field_name' => 'field_er_url',
+    'type' => 'entityreference',
+    'cardinality' => 1,
+    'settings' => array(
+      'target_type' => 'node',
+      'handler' => 'base',
+      'handler_settings' => array(
+        'target_bundles' => array('article' => 'article'),
+      ),
+    ),
+  );
+  field_create_field($field);
+
+  $instance = array(
+    'field_name' => 'field_er_url',
+    'entity_type' => 'node',
+    'label' => 'Ref - feeds URL',
+    'bundle' => 'article',
+  );
+  field_create_instance($instance);
+
+  // Entity reference field - mapped by Label.
+  $field = array(
+    'field_name' => 'field_er_label',
+    'type' => 'entityreference',
+    'cardinality' => 1,
+    'settings' => array(
+      'target_type' => 'node',
+      'handler' => 'base',
+      'handler_settings' => array(
+        'target_bundles' => array('article' => 'article'),
+      ),
+    ),
+  );
+  field_create_field($field);
+
+  $instance = array(
+    'field_name' => 'field_er_label',
+    'entity_type' => 'node',
+    'label' => 'Ref - entity label',
+    'bundle' => 'article',
+  );
+  field_create_instance($instance);
+}
